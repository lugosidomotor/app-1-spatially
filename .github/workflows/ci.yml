name: CI

on:
  workflow_dispatch:
    inputs:
      choice:
        type: choice
        description: Select environment to deploy
        options:
        - dev
        - qa
        - prod
        default: dev
        
  push:
    branches:
    - main

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Check Out Repo
      uses: actions/checkout@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
      
    - name: Set short sha
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      
    - name: Determine environment file
      id: determine_env_file
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "env_file=./dev/dev.yml" >> $GITHUB_ENV
        else
          echo "env_file=./${{ github.event.inputs.choice }}/${{ github.event.inputs.choice }}.yml" >> $GITHUB_ENV
        fi

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:${{ steps.vars.outputs.sha_short }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:${{ steps.vars.outputs.sha_short }}
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        
    - name: Update Kubernetes resources
      env:
        DOCKER_USERNAME: "${{ secrets.DOCKER_USERNAME }}"
        NEW_VERSION: '${{ secrets.DOCKER_USERNAME }}\/${{ secrets.DOCKER_REPO }}:${{ steps.vars.outputs.sha_short }}'
      run: |
        cd config
        sed -i 's/'$DOCKER_USERNAME'.*/'$NEW_VERSION'/g' ${{ env.env_file }}
        
    - name: Commit files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -am "Bump docker tag to ${{ steps.vars.outputs.sha_short }}"
        
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: notify slack in case of success
      id: slack_success
      uses: slackapi/slack-github-action@v1.24.0
      # https://api.slack.com/apps/<your-app-id>/incoming-webhooks
      if: ${{ success() }}
      with:
        channel-id: 'C07HE9MMNKC' # slack channel #notications
        payload: |
          {
            "text": "Successful GitHub Action",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn", 
                  "text": ":white_check_mark: *Successful deployment to PROD* \n *User:* ${{ github.actor }}  *Branch:* ${{ github.ref }}  *Repo:* ${{ github.repository }}  \n *Version:* ${{ steps.vars.outputs.sha_short }}"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": ":link: Successful action"
                    },
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFICATIONS_TOKEN }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

    - name: notify slack in case of failure
      id: slack_failure
      uses: slackapi/slack-github-action@v1.24.0
      # https://api.slack.com/apps/<your-app-id>/incoming-webhooks
      if: ${{ failure() }}
      with:
        channel-id: 'C07HE9MMNKC' # slack channel #notications
        payload: |
          {
            "text": "GitHub Action failed",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":fire_engine: *Failed deployment to PROD* \n *User:* ${{ github.actor }}  *Branch:* ${{ github.ref }}  *Repo:* ${{ github.repository }}"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": ":link: Failed action"
                    },
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFICATIONS_TOKEN }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
